'use strict';

if (!config.tasks.css ||Â !config.tasks.scss) {
    return false;
}

const read = require('fs-readdir-recursive');

let paths = {
    all: config.root.watch.map(value => path.join(config.root.base, value, '_all.scss')),
    allsub: config.root.watch.map(value => path.join(config.root.base, value, '_allsub.scss')),
    fusion: config.root.watch.map(value => path.join(config.root.base, value, '_allFusion.scss'))
};

// Add a banner to warn users
let banner = '// DO NOT EDIT DIRECTLY!\n// Generated by gulpfile.js/tasks/scss.js\n\n';

function scanSubdirectories(directory) {
    return read(directory, (file, numberOfFiles, files) => {
        let check = file[0] !== '_' && file[0] !== '.' && (!path.extname(file) || path.extname(file) === '.scss');
        // in allsub.scss files, ignore root directory
        if (files.indexOf('_allsub.scss') !== -1) {
            if (path.extname(file)) {
                return file[0] !== '_' && file[0] !== '.' && !path.extname(file);
            }
        }
        return check;
    });
}

// Append import statements for each partial
function writeImportStatements(partials, file, prepend = '') {
    partials.forEach(partial => {
        let regex = new RegExp(path.sep, 'g');
        partial = partial.replace('.scss', '').replace(regex, '/');
        fs.appendFileSync(file, `@import "${prepend}${partial}";\n`);
    });
}

// Hack the ability to import directories in Sass
// Import the whole directory with @import "foobar/all";
function scss(callback) {
    paths.all.forEach(folder => {
        glob(folder, (error, files) => {
            files.forEach(allFile => {
                fs.writeFileSync(allFile, banner);
                let directory = path.dirname(allFile);
                // Exclude all files with "_"
                let partials = fs.readdirSync(directory).filter(file => file.indexOf('_') !== 0 && path.extname(file) === '.scss');
                writeImportStatements(partials, allFile);
            });
        });
    });

    paths.allsub.forEach(folder => {
        glob(folder, (error, files) => {
            files.forEach(allFile => {
                fs.writeFileSync(allFile, banner);
                let partials = scanSubdirectories(path.dirname(allFile));
                writeImportStatements(partials, allFile);
            });
        });
    });

    paths.fusion.forEach(folder => {
        glob(folder, (error, files) => {
            files.forEach(allFile => {
                fs.writeFileSync(allFile, banner);
                let fusionPath = `${path.dirname(allFile).split('Private/')[0]}Private/Fusion`;
                let partials = scanSubdirectories(fusionPath);
                let prepend = `${fusionPath.replace(/([\w]*Packages\/(Sites|Plugins)\/)/, '')}/`;
                writeImportStatements(partials, allFile, prepend);
            });
        });
    });

    if (typeof callback == 'function') {
        callback();
    } else {
        return true;
    }
}

module.exports = scss;
