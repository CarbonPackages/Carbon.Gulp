"use strict";

if (!config.tasks.css || !config.tasks.scss) {
    return false;
}

const read = require("fs-readdir-recursive");
const banner = "// DO NOT EDIT DIRECTLY!\n// Generated by Carbon/Gulp\n\n";

let paths = {
    all: config.root.watch.map(value =>
        path.join(config.root.base, value, "_all.scss")
    ),
    allsub: config.root.watch.map(value =>
        path.join(config.root.base, value, "_allsub.scss")
    ),
    fusion: config.root.watch.map(value =>
        path.join(config.root.base, value, "_allFusion.scss")
    )
};

function scanSubdirectories(directory) {
    return read(directory, (name, index, dir) => {
        let check =
            name[0] !== "_" && // Don't start with "_"
            name[0] !== "." && // Don't start with "."
            (!path.extname(name) || path.extname(name) === ".scss"); // Folder or scss file

        // We have a folder or we are NOT in the same directory
        if (check && (!path.extname(name) || directory !== dir)) {
            return name;
        } else {
            return false;
        }
    });
}

// Append import statements for each partial
function writeImportStatements(partials, file, prepend = "") {
    partials.forEach(partial => {
        let regex = new RegExp(path.sep, "g");
        partial = partial.replace(".scss", "").replace(regex, "/");
        fs.appendFileSync(file, `@import "${prepend}${partial}";\n`);
    });
}

// Hack the ability to import directories in Sass
// Import the whole directory with @import "foobar/all";
function scss(callback) {
    paths.all.forEach(folder => {
        glob(folder, (error, files) => {
            files.forEach(allFile => {
                fs.writeFileSync(allFile, banner);
                let directory = path.dirname(allFile);
                // Exclude all files with "_"
                let partials = fs
                    .readdirSync(directory)
                    .filter(
                        file =>
                            file.indexOf("_") !== 0 &&
                            path.extname(file) === ".scss"
                    );
                writeImportStatements(partials, allFile);
            });
        });
    });

    paths.allsub.forEach(folder => {
        glob(folder, (error, files) => {
            files.forEach(allFile => {
                fs.writeFileSync(allFile, banner);
                let partials = scanSubdirectories(path.dirname(allFile));
                writeImportStatements(partials, allFile);
            });
        });
    });

    paths.fusion.forEach(folder => {
        glob(folder, (error, files) => {
            files.forEach(allFile => {
                fs.writeFileSync(allFile, banner);
                let fusionPath = `${
                    path.dirname(allFile).split("Private/")[0]
                }Private/Fusion`;

                let partials = scanSubdirectories(fusionPath);
                let prepend = `${fusionPath.replace(
                    /(^\.src\/|[\w]*Packages\/(Sites|Plugins)\/)/,
                    ""
                )}/`;
                writeImportStatements(partials, allFile, prepend);
            });
        });
    });

    if (typeof callback == "function") {
        callback();
    } else {
        return true;
    }
}

module.exports = scss;
